任务描述
相关知识
LR分析器
C/C++
实验要求
起始符
保留字
分隔方式
错误处理
输入
样例输入：
输出
任务描述
本关任务：根据给定文法，用C/C++语言编写SLR(1) 或LR(1)语法分析器

相关知识
为了完成本关任务，你需要掌握：

LR文法
C/C++ 编程语言基础
C语言的基本结构知识
LR分析器
在动手设计分析器之前，你应该先设计好下面文法的SLR(1)或LR(1)分析表。

C/C++
本实训涉及函数、结构体，标准流输入输出，字符串等操作

实验要求
实验文法定义

program -> compoundstmt
stmt -> ifstmt | whilestmt | assgstmt | compoundstmt
compoundstmt -> { stmts }
stmts -> stmt stmts | E
ifstmt -> if ( boolexpr ) then stmt else stmt
whilestmt -> while ( boolexpr ) stmt
assgstmt -> ID = arithexpr ;
boolexpr -> arithexpr boolop arithexpr
boolop -> < | > | <= | >= | ==
arithexpr -> multexpr arithexprprime
arithexprprime -> + multexpr arithexprprime | - multexpr arithexprprime | E
multexpr -> simpleexpr multexprprime
multexprprime -> * simpleexpr multexprprime | / simpleexpr multexprprime | E
simpleexpr -> ID | NUM | ( arithexpr )
起始符
program

保留字
{ }
if ( ) then else
while ( )
ID =
> < >= <= ==
+ -
* /
ID NUM
E 是'空'
分隔方式
同一行的输入字符用一个空格字符分隔，例如： ID = NUM ;

错误处理
本实验需要考虑错误处理，如果程序不正确（包含语法错误），它应该打印语法错误消息（与行号一起），并且程序应该修正错误，并继续解析。
例如：

语法错误,第4行,缺少";"
输入
要求：在同一行中每个输入字符用一个空格字符分隔，无其余无关符号。

样例输入：
{
ID = NUM ;
}
{
If E1
then
s1
else
If E2
Then
S2
else
S3
}
并没有E1，E2等符号，这只是指代表达式

输出
样例一输出

对于正确的程序，输出该程序的最右推导过程

对于有错误的的程序，输出错误问题并改正，继续输出正确的最右推导

每一组串之间均有一个空格符相隔开，分号，括号，=>符号后均有一个空格符隔开，每一句推导只占一行

样例一：
测试输入：
{

ID = NUM ;

}
输出：
program =>
compoundstmt =>
{ stmts } =>
{ stmt stmts } =>
{ stmt } =>
{ assgstmt } =>
{ ID = arithexpr ; } =>
{ ID = multexpr arithexprprime ; } =>
{ ID = multexpr ; } =>
{ ID = simpleexpr multexprprime ; } =>
{ ID = simpleexpr ; } =>
{ ID = NUM ; }
样例二：
测试输入：
{

while ( ID == NUM )

{

ID = NUM

}

}
输出：
语法错误，第4行，缺少";"
program =>
compoundstmt =>
{ stmts } =>
{ stmt stmts } =>
{ stmt } =>
{ whilestmt } =>
{ while ( boolexpr ) stmt } =>
{ while ( boolexpr ) compoundstmt } =>
{ while ( boolexpr ) { stmts } } =>
{ while ( boolexpr ) { stmt stmts } } =>
{ while ( boolexpr ) { stmt } } =>
{ while ( boolexpr ) { assgstmt } } =>
{ while ( boolexpr ) { ID = arithexpr ; } } =>
{ while ( boolexpr ) { ID = multexpr arithexprprime ; } } =>
{ while ( boolexpr ) { ID = multexpr ; } } =>
{ while ( boolexpr ) { ID = simpleexpr multexprprime ; } } =>
{ while ( boolexpr ) { ID = simpleexpr ; } } =>
{ while ( boolexpr ) { ID = NUM ; } } =>
{ while ( arithexpr boolop arithexpr ) { ID = NUM ; } } =>
{ while ( arithexpr boolop multexpr arithexprprime ) { ID = NUM ; } } =>
{ while ( arithexpr boolop multexpr ) { ID = NUM ; } } =>
{ while ( arithexpr boolop simpleexpr multexprprime ) { ID = NUM ; } } =>
{ while ( arithexpr boolop simpleexpr ) { ID = NUM ; } } =>
{ while ( arithexpr boolop NUM ) { ID = NUM ; } } =>
{ while ( arithexpr == NUM ) { ID = NUM ; } } =>
{ while ( multexpr arithexprprime == NUM ) { ID = NUM ; } } =>
{ while ( multexpr == NUM ) { ID = NUM ; } } =>
{ while ( simpleexpr multexprprime == NUM ) { ID = NUM ; } } =>
{ while ( simpleexpr == NUM ) { ID = NUM ; } } =>
{ while ( ID == NUM ) { ID = NUM ; } }